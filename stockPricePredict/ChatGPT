import numpy as np
import pandas as pd
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense, Dropout  # Added Dropout layer
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import mean_squared_error
import matplotlib.pyplot as plt

# Load your price dataset from a CSV file
# Replace 'your_dataset.csv' with your actual dataset file path
dataset = pd.read_csv('your_dataset.csv')

# Assuming your dataset has a 'Date' column and a 'Price' column
# Make sure to adjust column names to match your dataset
data = dataset['Price'].values

# Define a sequence length (number of time steps to look back)
sequence_length = 10

# Create sequences from the data
sequences = []
for i in range(len(data) - sequence_length):
    sequence = data[i:i + sequence_length]
    target = data[i + sequence_length]
    sequences.append((sequence, target))

sequences = np.array(sequences)

# Split the data into training and testing sets
split_ratio = 0.8  # Train-test split ratio
split_index = int(len(sequences) * split_ratio)
train_sequences = sequences[:split_index]
test_sequences = sequences[split_index:]

X_train, y_train = train_sequences[:, 0], train_sequences[:, 1]
X_test, y_test = test_sequences[:, 0], test_sequences[:, 1]

# Normalize the data using Min-Max scaling
scaler = MinMaxScaler()
X_train = np.array([scaler.fit_transform(x.reshape(-1, 1)) for x in X_train])
X_test = np.array([scaler.transform(x.reshape(-1, 1)) for x in X_test])

# Build the LSTM model with a dropout layer
model = Sequential()
model.add(LSTM(50, activation='relu', input_shape=(sequence_length, 1)))
model.add(Dropout(0.2))  # Added Dropout layer with 20% dropout rate
model.add(Dense(1))
model.compile(optimizer='adam', loss='mean_squared_error')

# Train the model
model.fit(X_train, y_train, epochs=10, batch_size=32)

# Evaluate the model on the test data
test_loss = model.evaluate(X_test, y_test)
print(f'Test Loss: {test_loss}')

# Make predictions
predicted_prices = model.predict(X_test)

# Inverse transform the predictions and actual prices to their original scale
predicted_prices = scaler.inverse_transform(predicted_prices)
y_test = scaler.inverse_transform(y_test.reshape(-1, 1))

# Calculate the Mean Squared Error (MSE) for the predictions
mse = mean_squared_error(y_test, predicted_prices)
print(f'Mean Squared Error (MSE): {mse}')

# Plot the actual vs. predicted prices
plt.figure(figsize=(12, 6))
plt.plot(y_test, label='Actual Prices')
plt.plot(predicted_prices, label='Predicted Prices')
plt.xlabel('Time Steps')
plt.ylabel('Price')
plt.title('Actual vs. Predicted Prices')
plt.legend()
plt.show()
